1.
package arrays;
import java.util.Arrays;

public class CumulativeMultipleArray {
    public static void main(String[] args) {
        int[] arrNum = {5, 3, 4, 2, 0, 8};

        try {
            calculateCumulativeMultiple(arrNum);
            System.out.println("Output - arrNum: " + Arrays.toString(arrNum));
        } catch (Exception e) {
            System.out.println("An error occurred: " + e.getMessage());
        }
    }

    public static void calculateCumulativeMultiple(int[] arr) throws Exception {
        if (arr == null || arr.length == 0) {
            throw new Exception("Array is empty");
        }

        for (int i = 1; i < arr.length; i++) {
            if (arr[i - 1] == 0) {
                arr[i] = 0;
            } else {
                arr[i] *= arr[i - 1];
            }
        }
    }
}
________________________________________________________________________________________________

2.
package arrays;
import java.util.ArrayList;
import java.util.List;

public class MissingNumbers {
    public static List<Integer> findMissingNumbers(int[] arr) {
        List<Integer> missingNumbers = new ArrayList<>();

        int expectedNumber = arr[0];
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] != expectedNumber) {
                while (expectedNumber < arr[i]) {
                    missingNumbers.add(expectedNumber);
                    expectedNumber++;
                }
            }
            expectedNumber++;
        }

        return missingNumbers;
    }

    public static void main(String[] args) {
        int[] arrNum1 = {1, 2, 4, 5, 6};
        int[] arrNum2 = {1, 2, 3, 5, 6, 8, 10, 11, 14};

        List<Integer> missingNum1 = findMissingNumbers(arrNum1);
        List<Integer> missingNum2 = findMissingNumbers(arrNum2);

        System.out.println("Sample input: arrNum1 = (1, 2, 4, 5, 6)");
        System.out.println("Output: " + missingNum1);

        System.out.println("\nSample input: arrNum2 = (1, 2, 3, 5, 6, 8, 10, 11, 14)");
        System.out.println("Output: " + missingNum2);
    }
}
______________________________________________________________________________________________________________


3.
package arrays;
import java.util.HashMap;
import java.util.Map;

public class SingularSocksCount {
    public static int countSingularSocks(int[] arr) {
        Map<Integer, Integer> sockCounts = new HashMap<>();

        // Count the occurrences of each sock ID in the array
        for (int sockId : arr) {
            sockCounts.put(sockId, sockCounts.getOrDefault(sockId, 0) + 1);
        }

        int singularSocksCount = 0;
        for (int count : sockCounts.values()) {
            // Check for singular socks (count == 1)
            if (count == 1) {
                singularSocksCount++;
            }
        }

        return singularSocksCount;
    }

    public static void main(String[] args) {
        int[] arrNum = {10, 20, 20, 10, 10, 30, 50, 10, 20};

        System.out.println("Sample input: arrNum = (10, 20, 20, 10, 10, 30, 50, 10, 20)");
        int singularSocksCount = countSingularSocks(arrNum);
        System.out.println("Output: Count of singular socks = " + singularSocksCount);
    }
}
________________________________________________________________________________________________________________
4.
package arrays;
import java.util.*;
public class Solution{
public static void main(String[] args) {

	Scanner sc = new Scanner(System.in);

	int numberOfElements = sc.nextInt();
	int[] array = new int[numberOfElements];

	for (int i = 0; i < numberOfElements; i++) {
		array[i] = sc.nextInt();
	}

	sc.close();

	int subArrayLength = 1;
	int subArraySum = 0;
	int negativeSubArrayCount = 0;

	for (int i = 0; i < numberOfElements; i++) {

		for (int j = 0; j <= numberOfElements - subArrayLength; j++) {

			for (int k = j; k < j + subArrayLength; k++) {
				subArraySum += array[k];
			}

			if (subArraySum < 0) {
				negativeSubArrayCount++;
			}

			subArraySum = 0;

		}

			subArrayLength++;
	}

	System.out.println(negativeSubArrayCount);

}
}
__________________________________________________________________________________________
5.
package arrays;
class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class LinkedList {
    Node head;

    public LinkedList() {
        this.head = null;
    }

    public void insert(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
        } else {
            Node current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
        }
    }

    public void mergeLinkedLists(LinkedList list1, LinkedList list2) {
        if (list1.head == null) {
            this.head = list2.head;
            return;
        } else if (list2.head == null) {
            this.head = list1.head;
            return;
        }

        Node current1 = list1.head;
        Node current2 = list2.head;
        Node mergedHead = null;
        Node mergedTail = null;

        while (current1 != null && current2 != null) {
            if (current1.data <= current2.data) {
                if (mergedHead == null) {
                    mergedHead = current1;
                    mergedTail = current1;
                } else {
                    mergedTail.next = current1;
                    mergedTail = current1;
                }
                current1 = current1.next;
            } else {
                if (mergedHead == null) {
                    mergedHead = current2;
                    mergedTail = current2;
                } else {
                    mergedTail.next = current2;
                    mergedTail = current2;
                }
                current2 = current2.next;
            }
        }

        if (current1 != null) {
            mergedTail.next = current1;
        } else if (current2 != null) {
            mergedTail.next = current2;
        }

        this.head = mergedHead;
    }

    public void sortLinkedList() {
        if (head == null || head.next == null) {
            return;
        }

        Node current = head;
        while (current != null) {
            Node nextNode = current.next;
            while (nextNode != null) {
                if (current.data > nextNode.data) {
                    int temp = current.data;
                    current.data = nextNode.data;
                    nextNode.data = temp;
                }
                nextNode = nextNode.next;
            }
            current = current.next;
        }
    }

    public void display() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + "->");
            current = current.next;
        }
        System.out.print("null");
    }
}

public class Main {
    public static void main(String[] args) {
        LinkedList list1 = new LinkedList();
        list1.insert(25);
        list1.insert(35);
        list1.insert(12);
        list1.insert(4);
        list1.insert(36);
        list1.insert(48);

        LinkedList list2 = new LinkedList();
        list2.insert(8);
        list2.insert(32);
        list2.insert(22);
        list2.insert(45);
        list2.insert(63);
        list2.insert(49);

        LinkedList mergedList = new LinkedList();
        mergedList.mergeLinkedLists(list1, list2);
        mergedList.sortLinkedList();
        mergedList.display();
    }
}
__________________________________________________________________________________________________
6.
package arrays;
import java.util.HashSet;

class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class LinkedList {
    Node head;

    public LinkedList() {
        this.head = null;
    }

    public void insert(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
        } else {
            Node current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
        }
    }

    public void removeDuplicates() {
        if (head == null || head.next == null) {
            return;
        }

        HashSet<Integer> uniqueElements = new HashSet<>();
        Node current = head;
        Node prev = null;

        while (current != null) {
            if (uniqueElements.contains(current.data)) {
                prev.next = current.next;
            } else {
                uniqueElements.add(current.data);
                prev = current;
            }
            current = current.next;
        }
    }

    public void display() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + "->");
            current = current.next;
        }
        System.out.print("null");
    }
}

public class Main {
    public static void main(String[] args) {
        LinkedList linkedList = new LinkedList();
        linkedList.insert(2);
        linkedList.insert(5);
        linkedList.insert(12);
        linkedList.insert(2);
        linkedList.insert(3);
        linkedList.insert(5);
        linkedList.insert(1);
        linkedList.insert(2);
        linkedList.insert(5);
        linkedList.insert(5);

        linkedList.removeDuplicates();
        linkedList.display();
    }
}
____________________________________________________________________________________________________
7.
class Solution {
    public String longestPalindrome(String s) {

        String ans = "";
        
        for(int i=0; i<s.length(); i++){
             int low = i, high = i;
             while(low >= 0 && high < s.length() && s.charAt(low) == s.charAt(high)){
                 if(ans.length() < high-low+1){
                     ans = s.substring(low, high+1);
                 }
                low--;
                high++;
             }
             low = i;
             high = i+1;
            while(low >= 0 && high < s.length() && s.charAt(low) == s.charAt(high)){
                if(ans.length() < high-low+1){
                    ans = s.substring(low, high+1);
                }
                low--;
                high++;
            }
        }
        return ans;
        
    }
}
_______________________________________________________________________________________________________

8.
import java.util.*;
class Solution{
	
	public static void main(String []argh)
	{
		Scanner sc = new Scanner(System.in);
		
		while (sc.hasNext()) {
			String input=sc.next();
            //Complete the code
            
            Stack<Character> st = new Stack<>();
            boolean flag = true;
            
            for(int i=0; i<input.length(); i++)
            {
                if(input.charAt(i) == '(' || input.charAt(i) == '{' || input.charAt(i) == '[')
                {
                    st.push(input.charAt(i));
                }
                else
                {
                    if(input.charAt(i) == ')' && !st.isEmpty() && st.peek() == '(')
                    {
                        st.pop();
                    }
                    else if(input.charAt(i) == '}' && !st.isEmpty() && st.peek() == '{')
                    {
                        st.pop();
                    }
                    else if(input.charAt(i) == ']' && !st.isEmpty() && st.peek() == '[')
                    {
                        st.pop();
                    }
                    else
                    {
                        flag = false;
                    }
                }
            }
            
            if(input.length() == 0)
            {
                System.out.println("true");
            }
            else if(flag == true && st.size() == 0)
            {
                System.out.println("true");
            }
            else
            {
                System.out.println("false");
            }
        }
    }
}
_________________________________________________________________________________________________

9.
import java.util.*;
    public class test {
        public static void main(String[] args) {
            Scanner in = new Scanner(System.in);
            Deque<Integer> deque = new ArrayDeque<>();
            HashSet<Integer> hs = new HashSet<>();
            int n = in.nextInt();
            int m = in.nextInt();
            int c = 0 ;
            int[] nums = new int[n];
            for (int i = 0; i < n; i++) {
                nums[i] = in.nextInt();
            }
            
            for(int i = 0 ; i < n ; i++){
                deque.add(nums[i]);
                if(deque.size()>m){
                    int removed = deque.removeFirst();
                    if(!deque.contains(removed)){
                        hs.remove(removed);
                    }
                }
                hs.add(nums[i]);
                if(hs.size()>c){
                    c = hs.size();
                }
            }
            System.out.println(c);
        }
    } 
____________________________________________________________________________________________________
10.
class Student {
    private final int id;
    private final String name;
    private final double cgpa;

    public Student(int id, String name, double cgpa) {
        this.id = id;
        this.name = name;
        this.cgpa = cgpa;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public double getCgpa() {
        return cgpa;
    }
}

class Priorities {
    public List<Student> getStudents(List<String> events) {
        PriorityQueue<Student> queue = new PriorityQueue<>(
            Comparator.comparing(Student::getCgpa).reversed()
                .thenComparing(Student::getName)
                .thenComparing(Student::getId)
        );
        for (String event : events) {
            String[] parts = event.split("\\s+");
            if (parts[0].equals("ENTER")) {
                String name = parts[1];
                double cgpa = Double.parseDouble(parts[2]);
                int id = Integer.parseInt(parts[3]);
                Student student = new Student(id, name, cgpa);
                queue.add(student);
            } else if (parts[0].equals("SERVED")) {
                queue.poll();
            }
        }
        List<Student> students = new ArrayList<>(queue);
        students.sort(Comparator.comparing(Student::getCgpa).reversed()
            .thenComparing(Student::getName)
            .thenComparing(Student::getId)
        );
        return students;
    }
}
___________________________________________________________________________________________________

11.
class Solution {
    public ListNode swapPairs(ListNode head) {

         if(head == null || head.next == null)   
        return head;
        
        ListNode temp = new ListNode(0);
        temp.next = head;
        ListNode curr = temp;
        
        while(curr.next != null && curr.next.next != null){
            ListNode n1 = curr.next;
            ListNode n2 = curr.next.next;
            
            n1.next = n2.next;             
            curr.next = n2;                
            curr.next.next = n1;           
            curr = curr.next.next;    
    }
 
    return temp.next;
        
    }
}
__________________________________________________________________________________________________
12.
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
    ListNode curr = head;
    int count = 0;
    while (curr != null && count != k) { 
        curr = curr.next;
        count++;
    }
    if (count == k) { 
        curr = reverseKGroup(curr, k); 
        while (count-- > 0) {  
            ListNode temp = head.next; 
            head.next = curr;  
            curr = head; 
            head = temp; 
        }
        head = curr;
    }
    return head;
        
    }
}
